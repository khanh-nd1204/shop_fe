import { createSlice } from '@reduxjs/toolkit';

const initialState = {
    cart: [],
};

export const orderSlice = createSlice({
    name: 'order',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        doAddProductAction: (state, action) => {
            let cart = state.cart;
            const item = action.payload;
            let isExistIndex = cart.findIndex(cartItem => cartItem._id === item._id);
            if (isExistIndex > -1) {
                cart[isExistIndex].quantity = cart[isExistIndex].quantity + item.quantity;
            } else {
                cart.unshift(item);
            }
            //update redux
            state.cart = cart;
        },
        doChangeQuantityAction: (state, action) => {
            let cart = state.cart;
            const item = action.payload;

            let isExistIndex = cart.findIndex(cartItem => cartItem._id === item._id);
            if (isExistIndex > -1) {
                cart[isExistIndex].quantity = item.quantity;
            }
        },
        doDeleteProductAction: (state, action) => {
            const id = action.payload;
            state.cart = state.cart.filter(cartItem => cartItem._id !== id);
        },
        doPlaceOrderAction: (state, action) => {
            state.cart = [];
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {

    },
});

export const { doAddProductAction, doChangeQuantityAction,
    doDeleteProductAction, doPlaceOrderAction} = orderSlice.actions;


export default orderSlice.reducer;
